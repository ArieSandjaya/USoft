using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

using USoft.Globalization.Classes;
using USoft.Common.CommonFunction;
using USoft.DataAccess;
using USoft.Globalization;

namespace USoft.Modules.IT.Item
{
    public partial class ItemOutAddEdit : USoft.Modules.PageBase
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            getUserInfo();
            LoadControl();

            if (!Page.IsPostBack)
            {
                ControlBindingHelper.BindDataSetToCombo(ddlBranch, "Warehouse", "spGetBranchToCombo ''", "BranchId", "BranchName", null);
                ControlBindingHelper.BindDataSetToCombo(ddlItemType, "- Select One -", "spGetITItemTypeToCombo ''", "ItemTypeCode", "ItemTypeName", null);
                ControlBindingHelper.BindDataSetToCombo(ddlCondition, "- Select One -", "spGetITConditionToCombo ''", "ConditionCode", "ConditionName", null);
                ControlBindingHelper.BindDataSetToCombo(ddlSupplier, "- Select One -", "spGetITSupplierToCombo 'State = ''IT'''", "SupplierCode", "SupplierName", null);
                ControlBindingHelper.BindDataSetToCombo(ddlPIC, "- Select One -", "spGetMappingUsersToCombo 'State = 1'", "UserId", "UserName", null);

                if (this.state == "add")
                {
                    lblItemOutCode.Text = "[Generated By System]";
                }
                else
                {
                    LoadData();
                }
                FormState();
            }
            //else
            //{
            //    if (this.state == "edit")
            //    {
            //        LoadData();
            //    }
            //}
            //FormState();
        }

        private void LoadControl()
        {
            ucHeaderPage.Text = cf.ToUpperFirstLetter(this.state) + " Item Out Detail";
            ucHeaderPage.CssClass = "divHeader1";
        }

        private void LoadData()
        {
            USoft.DataAccess.Entities.IT.Item info = new USoft.DataAccess.Entities.IT.Item();
            USoft.DataAccess.IT.Item da = new USoft.DataAccess.IT.Item();

            info.ItemOutCode = editID;

            da.getItemOutView(ref info);

            lblDocStatus.Text = cf.DocStatus(info.Status);
            lblItemOutCode.Text = info.ItemOutCode;
            lblOutDate.Text = cf.DateFormatYYYYMMDD(info.Date);
            lblBranchName.Text = info.BranchNameFrom == "" ? "Warehouse" : info.BranchNameFrom;
            lblItemType.Text = info.ItemTypeName;
            lblItemCode.Text = info.ItemName;
            lblCondition.Text = info.ConditionName;
            lblStatusOut.Text = cf.ItemStatusOut(info.StatusOut.ToString());
            lblSupplier.Text = info.SupplierName;
            lblPICName.Text = info.PICName;
            lblRepairStatus.Text = info.RepairStatus == "" ? "-" : info.RepairStatus;
            lblRemark.Text = info.Remark;

            txtOutDate.Text = cf.DateFormatYYYYMMDD(info.Date);
            ddlBranch.SelectedValue = info.BranchIdFrom == 0 ? "" : info.BranchIdFrom.ToString();
            ddlItemType.SelectedValue = info.ItemTypeCode;
            ControlBindingHelper.BindDataSetToCombo(ddlItemCode, "- Select One -", "spGetITItemByBranchTypeToCombo '" + ddlBranch.SelectedValue + "','" + ddlItemType.SelectedValue + "'", "ITItemCode", "ItemName", info.ItemCode);
            ddlCondition.SelectedValue = info.ConditionCode.ToString();
            ddlStatusOut.SelectedValue = info.StatusOut.ToString();
            ddlSupplier.SelectedValue = info.SupplierCode;
            ddlPIC.SelectedValue = info.PIC;

            CreatedBy = info.CreatedBy;
            Status = info.Status;
            IsApprove = (info.Status == "A");

            enUI.State = info.ApprovalState;
            enUI.DataBranchId = info.BranchIdFrom;
        }

        protected bool ProcessData(string state)
        {
            USoft.DataAccess.Entities.IT.Item info = new USoft.DataAccess.Entities.IT.Item();
            USoft.DataAccess.IT.Item da = new USoft.DataAccess.IT.Item();

            info.Date = Convert.ToDateTime(txtOutDate.Text);
            info.BranchIdFrom = (ddlBranch.SelectedValue != "") ? Convert.ToInt32(ddlBranch.SelectedValue) : 0;
            info.ItemCode = ddlItemCode.SelectedValue;
            info.ConditionCode = Convert.ToInt32(ddlCondition.SelectedValue);
            info.StatusOut = Convert.ToInt32(ddlStatusOut.SelectedValue);
            info.SupplierCode = (ddlSupplier.SelectedValue != "") ? ddlSupplier.SelectedValue : "";
            info.PIC = ddlPIC.SelectedValue;
            info.InputBy = Session["UserId"].ToString();

            if (state == "U")   // Update
            {
                info.ItemOutCode = editID;
                lblMessage.Text = da.ItemOutUpdate(info);
            }
            else // Add
            {
                lblMessage.Text = da.ItemOutInsert(info);
            }

            if (lblMessage.Text == "Process Success")   // Prevent Multiple Add
            {
                return true;
            }
            return false;
        }

        protected bool ProcessDataStatus(string Status)
        {
            USoft.DataAccess.Entities.IT.Item info = new USoft.DataAccess.Entities.IT.Item();
            USoft.DataAccess.IT.Item da = new USoft.DataAccess.IT.Item();

            info.ItemOutCode = editID;
            info.Status = Status;
            info.ApprovalState = enUI.State;
            info.InputBy = Session["UserId"].ToString();

            lblMessage.Text = da.ItemOutUpdateStatus(info);

            if (lblMessage.Text == "Process Success")   // Prevent Multiple Add
            {
                return true;
            }
            return false;
        }

        private string SendEmail(int StateApproval)
        {
            /* Status
                D = Draft
                R = RFA
                A = Approve
            */

            string SendMailStatus = "";
            string MailSubject = "U-Soft - Item Out #" + editID + " (" + cf.DocStatus(Status) + ")";
            string MailBody = "U-Soft - Item Out<br /><br />Item Out Code : " + editID + "<br /><br />";
            List<USoft.DataAccess.Entities.Email> UserMailFrom = new List<USoft.DataAccess.Entities.Email>();
            List<USoft.DataAccess.Entities.Email> UserMailTo = new List<USoft.DataAccess.Entities.Email>();
            List<USoft.DataAccess.Entities.Email> UserMailCC = new List<USoft.DataAccess.Entities.Email>();
            USoft.DataAccess.General.Email da2 = new USoft.DataAccess.General.Email();

            //da2.getUserEmail(ref UserMailFrom, Session["UserId"].ToString());
            da2.getMappingApprovalEmailTo(ref UserMailTo, MenuId, StateApproval);
            da2.getMappingApprovalEmailTo(ref UserMailCC, MenuId, StateApproval);

            if (Status == "D") // Reject
            {
                //StateApproval = 0;
                MailSubject = "U-Soft - Item Out #" + editID + " (" + cf.DocStatus("X") + ")";
                da2.getUserEmail(ref UserMailTo, CreatedBy);
                MailBody += "Status : " + cf.DocStatus("X");
            }
            else if ((Status == "R") || (Status == "A")) // RFA or Approve
            {
                //StateApproval = 1 or 2;
                MailBody += "Status : " + cf.DocStatus(Status);
            }
            SendMailStatus = ", " + da2.sendEmail(UserMailFrom, UserMailTo, UserMailCC, MailSubject, MailBody, true);

            return SendMailStatus;
        }

        protected void ProcessForm()
        {
            CekSessions.BlockUI(this.Page);

            if (this.state == "add")
            {
                if (ProcessData("A"))
                {
                    imbAdd.Visible = false;
                }
            }
            else
            {
                ProcessData("U");
            }
            CekSessions.UnBlockUI(this.Page, ScriptManager1);
        }

        protected void getITItem(object sender, EventArgs e)
        {
            CekSessions.BlockUI(this.Page);

            ddlItemCode.Items.Clear();

            if (ddlItemType.SelectedValue != "")
            {
                ControlBindingHelper.BindDataSetToCombo(ddlItemCode, "- Select One -", "spGetITItemByBranchTypeToCombo '" + ddlBranch.SelectedValue + "','" + ddlItemType.SelectedValue + "'", "ITItemCode", "ItemName", null);
            }
            pnlItemCode.Update();

            CekSessions.UnBlockUI(this.Page, ScriptManager1);
        }

        protected void imbAdd_Click(object sender, ImageClickEventArgs e)
        {
            ProcessForm();
        }

        protected void imbUpdate_Click(object sender, ImageClickEventArgs e)
        {
            ProcessForm();
        }

        protected void imbBack_Click(object sender, ImageClickEventArgs e)
        {
            Response.Redirect("ItemOut.aspx?validate=" + validate(0) + "&editID=" + editID);
        }

        protected void ddlStatusOut_SelectedIndexChanged(object sender, EventArgs e)
        {
            trVendor.Visible = (ddlStatusOut.SelectedValue == "1");
            pnlDataPage.Update();
        }

        protected void imbApprove_Click(object sender, ImageClickEventArgs e)
        {
            CekSessions.BlockUI(this.Page);

            if (ProcessDataStatus((enUI.State < (enUI.MaxState - 1)) ? "R" : "A"))  // 
            {
                ResponseProcess();
            }

            CekSessions.UnBlockUI(this.Page, ScriptManager1);
        }

        protected void imbReject_Click(object sender, ImageClickEventArgs e)
        {
            CekSessions.BlockUI(this.Page);

            if (ProcessDataStatus("D"))
            {
                ResponseProcess();
            }

            CekSessions.UnBlockUI(this.Page, ScriptManager1);
        }

        protected void imbRFA_Click(object sender, ImageClickEventArgs e)
        {
            CekSessions.BlockUI(this.Page);

            if (ProcessDataStatus("R"))
            {
                ResponseProcess();
            }

            CekSessions.UnBlockUI(this.Page, ScriptManager1);
        }

        private void ResponseProcess()
        {
            LoadData();
            FormState();
            lblMessage.Text += SendEmail(enUI.State);
            pnlDataPage.Update();
        }

        protected void FormState()
        {
            imbRFA.Attributes.Add("onclick", "return confirm('Are you certain you want to Request For Approval ?');");
            imbApprove.Attributes.Add("onclick", "return confirm('Are you certain you want to Approve ?');");
            imbReject.Attributes.Add("onclick", "return confirm('Are you certain you want to Reject ?');");

            imbAdd.Visible = false;
            imbUpdate.Visible = false;
            imbRFA.Visible = false;
            imbApprove.Visible = false;
            imbReject.Visible = false;
            trDocStatus.Visible = false;
            trVendor.Visible = (ddlStatusOut.SelectedValue == "1");
            trRepairStatus.Visible = false;
            trRemark.Visible = false;

            if (state == "add")
            {
                imbAdd.Visible = true;
            }
            else
            {
                trDocStatus.Visible = true;
                if ((Status == "D") && (CreatedBy == enUI.UserId)) //Draft
                {
                    imbUpdate.Visible = true;
                    imbRFA.Visible = true;

                    lblOutDate.Visible = false;
                    lblBranchName.Visible = false;
                    lblItemType.Visible = false;
                    lblItemCode.Visible = false;
                    lblCondition.Visible = false;
                    lblStatusOut.Visible = false;
                    lblSupplier.Visible = false;
                    lblPICName.Visible = false;
                    lblRepairStatus.Visible = false;
                    lblRemark.Visible = false;

                    txtOutDate.Visible = true;
                    ddlBranch.Visible = true;
                    ddlItemType.Visible = true;
                    ddlItemCode.Visible = true;
                    ddlCondition.Visible = true;
                    ddlStatusOut.Visible = true;
                    ddlSupplier.Visible = true;
                    ddlPIC.Visible = true;
                }
                else
                {
                    daUI.getApprovalState(ref enUI);
                    trRepairStatus.Visible = (ddlStatusOut.SelectedValue == "1");
                    trRemark.Visible = (lblRepairStatus.Text == "Done");

                    if ((Status == "R") && (enUI.ApprovalState)) // RFA
                    {
                        imbApprove.Visible = true;
                        imbReject.Visible = true;
                    }

                    lblOutDate.Visible = true;
                    lblBranchName.Visible = true;
                    lblItemType.Visible = true;
                    lblItemCode.Visible = true;
                    lblCondition.Visible = true;
                    lblStatusOut.Visible = true;
                    lblSupplier.Visible = true;
                    lblPICName.Visible = true;
                    lblRepairStatus.Visible = true;
                    lblRemark.Visible = true;

                    txtOutDate.Visible = false;
                    ddlBranch.Visible = false;
                    ddlItemType.Visible = false;
                    ddlItemCode.Visible = false;
                    ddlCondition.Visible = false;
                    ddlStatusOut.Visible = false;
                    ddlSupplier.Visible = false;
                    ddlPIC.Visible = false;
                }
            }
        }
    }
}
