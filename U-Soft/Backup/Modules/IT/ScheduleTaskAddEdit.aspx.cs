using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

using USoft.Globalization.Classes;
using USoft.Common.CommonFunction;
using USoft.DataAccess;
using USoft.Globalization;

namespace USoft.Modules.IT
{
    public partial class ScheduleTaskAddEdit : USoft.Modules.PageBase
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            getUserInfo();
            LoadControl();

            if (!IsPostBack)
            {
                int i;
                string j;

                ddlHour.Items.Add(new ListItem("--", ""));
                for (i = 0; i < 24; i++)
                {
                    j = (i.ToString().Length == 1 ? "0" : "") + i.ToString();

                    ddlHour.Items.Add(new ListItem(j, j));
                }
                
                ddlMinute.Items.Add(new ListItem("--", ""));
                for (i = 0; i < 60; i++)
                {
                    j = (i.ToString().Length == 1 ? "0" : "") + i.ToString();

                    ddlMinute.Items.Add(new ListItem(j, j));
                }

                txtIntervalRange.Attributes["onkeyup"] = "formatNumber(this);";

                if (this.state == "add")
                {
                    lblScheduleNo.Text = "[Generated By System]";
                    txtIntervalRange.Visible = false;
                    trStatus.Visible = false;
                }
                else
                {
                    LoadData();
                }
            }
        }

        private void LoadControl()
        {
            ucHeaderPage.Text = cf.ToUpperFirstLetter(this.state) + " Schedule Task";
            ucHeaderPage.CssClass = "divHeader1";
        }

        private void LoadData()
        {
            USoft.DataAccess.Entities.IT.ScheduleTask info = new USoft.DataAccess.Entities.IT.ScheduleTask();
            USoft.DataAccess.IT.ScheduleTask da = new USoft.DataAccess.IT.ScheduleTask();

            info.ScheduleNo = editID;

            da.getScheduleTaskView(ref info);

            lblScheduleNo.Text = info.ScheduleNo;
            ddlType.SelectedValue = info.ScheduleType;
            txtTitle.Text = info.ScheduleTitle;
            txtStartDate.Text = cf.DateFormatYYYYMMDD(info.StartDate);
            txtEndDate.Text = (info.EndDate.Year.ToString() != "1") ? cf.DateFormatYYYYMMDD(info.EndDate) : "";
            ddlIntervalBy.SelectedValue = info.IntervalBy;
            IntervalState();
            txtIntervalRange.Text = (info.IntervalBy != "0") ? info.IntervalRange.ToString() : "";
            ddlHour.SelectedValue = info.IntervalHour;
            ddlMinute.SelectedValue = info.IntervalMinute;
            if (this.state == "edit")
            {
                ddlStatus.SelectedValue = info.Status;
            }
            txtDescription.Text = info.Description;
        }

        protected bool ProcessData(string state)
        {
            CekSessions.BlockUI(this.Page);

            USoft.DataAccess.Entities.IT.ScheduleTask info = new USoft.DataAccess.Entities.IT.ScheduleTask();
            USoft.DataAccess.IT.ScheduleTask da = new USoft.DataAccess.IT.ScheduleTask();

            info.ScheduleType = ddlType.SelectedValue;
            info.ScheduleTitle = txtTitle.Text;
            info.StartDate = Convert.ToDateTime(txtStartDate.Text);
            info.EndDate = Convert.ToDateTime((txtEndDate.Text != "") ? txtEndDate.Text : "1753-01-01");
            info.IntervalBy = ddlIntervalBy.SelectedValue;
            if (info.IntervalBy != "0")
            {
                info.IntervalRange = Convert.ToInt16(txtIntervalRange.Text);
            }
            info.IntervalHour = ddlHour.SelectedValue;
            info.IntervalMinute = ddlMinute.SelectedValue;
            info.Description = txtDescription.Text;
            if (this.state == "edit")
            {
                info.Status = ddlStatus.SelectedValue;
            }
            info.InputBy = Session["UserId"].ToString();

            if (state == "U")   // Update
            {
                info.ScheduleNo = editID;
                lblMessage.Text = da.ScheduleTaskUpdate(info);
            }
            else // Add
            {
                lblMessage.Text = da.ScheduleTaskInsert(info);
            }

            CekSessions.UnBlockUI(this.Page, ScriptManager1);

            if (lblMessage.Text == "Process Success")   // Prevent Multiple Add
            {
                return true;
            }
            return false;
        }

        protected void IntervalState()
        {
            txtIntervalRange.Visible = (ddlIntervalBy.SelectedValue != "0") ? true : false;
        }

        protected void ddlIntervalBy_SelectedIndexChanged(object sender, EventArgs e)
        {
            CekSessions.BlockUI(this.Page);

            IntervalState();
            pnlDataTable.Update();

            CekSessions.UnBlockUI(this.Page, ScriptManager1);
        }

        protected void imbSubmit_Click(object sender, ImageClickEventArgs e)
        {
            if (this.state == "add")
            {
                if (ProcessData("A"))
                {
                    imbSubmit.Visible = false;
                }
            }
            else
            {
                ProcessData("U");
            }
        }

        protected void imbCancel_Click(object sender, ImageClickEventArgs e)
        {
            Response.Redirect("ScheduleTask.aspx?validate=" + validate(0));
        }
    }
}
